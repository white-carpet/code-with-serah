# -*- coding: utf-8 -*-
"""loan approvement

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F8N30zOe1oglEaG6nFqGCWJg8RL8sKw_
"""

import pandas as pd
df = pd.read_csv('loan_data.csv')

df.head()

df.isnull().sum()

df.shape

df.info()

df['person_gender']=df['person_gender'].map({'male':1,'female':0})
# Fix: The previous mapping for loan_status was incorrect.
df['loan_status']=df['loan_status'].map({1:1,0:0})
df['person_income']  = df['person_income'].fillna(df['person_income'].mean())
df['loan_int_rate']  = df['loan_int_rate'].fillna(df['loan_int_rate'].mean())
df['person_home_ownership']=df['person_home_ownership'].map({"MORTGAGE":0,"RENT":1,"OWN":2,"OTHER":3})
df['loan_intent']=df['loan_intent'].map({"PERSONAL":0,"AUTO":1,"CREDIT":2,"HOME":3, "DEBTCONSOLIDATION":4, "EDUCATION":5})
df['previous_loan_defaults_on_file']=df['previous_loan_defaults_on_file'].map({"Yes":1,"No":0})

# Convert person_education to numeric using one-hot encoding
df = pd.get_dummies(df, columns=['person_education'], drop_first=True)

multi_cats= ['person_age', 'person_income', 'person_emp_exp','loan_amnt','loan_int_rate','loan_percent_income','cb_person_cred_hist_length' ,'credit_score',]
pd.get_dummies(df[multi_cats],drop_first=True)



import seaborn as sns
import matplotlib.pyplot as plt
# Calculate the correlation matrix only for numeric columns
corr = df.select_dtypes(include='number').corr()
sns.heatmap(corr, annot=True)
plt.show()

df['DTI']=[df['person_income'][i]/df['loan_amnt'][i] for i in range(len(df))]

import seaborn as sns
import matplotlib.pyplot as plt

# Convert person_home_ownership to categorical type for plotting
df['person_home_ownership'] = df['person_home_ownership'].astype('category')

# Check unique values and data type
print(df['person_home_ownership'].unique())
print(df['person_home_ownership'].dtype)

sns.countplot(x='loan_status',data=df)
sns.boxplot(x='person_education_Bachelor',y='person_income',data=df)
sns.countplot(x='person_home_ownership',data=df)
# Explicitly set the order for person_home_ownership in the boxplot
sns.boxplot(x='person_home_ownership',y='loan_amnt',data=df, order=[0, 1, 2, 3])

"""Now, let's perform the one-hot encoding for the `person_education` column in a separate step to ensure it's handled correctly."""

# Check if 'person_education' column exists before one-hot encoding
if 'person_education' in df.columns:
    df = pd.get_dummies(df, columns=['person_education'], drop_first=True)
    print("One-hot encoding applied to 'person_education'.")
else:
    print("'person_education' column not found in the DataFrame.")

# Display the first few rows and info of the updated DataFrame
display(df.head())
df.info()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
x=df.drop('loan_status',axis=1)
y=df['loan_status']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

# Fill missing values in the training data with the mean
x_train['loan_intent'] = x_train['loan_intent'].fillna(x_train['loan_intent'].mean())

model=LogisticRegression()
model.fit(x_train,y_train)

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(x_train, y_train)
y_pred = clf.predict(x_test)
print(accuracy_score(y_test,y_pred))
print(classification_report(y_test,y_pred))

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

# Fill missing values in the test data with the mean from the training data
x_test['loan_intent'] = x_test['loan_intent'].fillna(x_train['loan_intent'].mean())

y_pred=model.predict(x_test)
print(accuracy_score(y_test,y_pred))
print(classification_report(y_test,y_pred))